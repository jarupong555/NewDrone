package main

import (
    "fmt"
    "net/http"
    "os/exec"

    "github.com/gin-gonic/gin"
)

func streamRTSP(c *gin.Context) {
    // RTSP stream URL
    rtspURL := "rtsp://10.8.8.58:8554/main.h264"

    // Use ffmpeg to convert RTSP stream to HTTP
    cmd := exec.Command("ffmpeg",
        "-i", rtspURL,
        "-f", "mjpeg",
        "-q:v", "5",
        "-an", "-sn",
        "-", // output to stdout
    )

    // Set up the response headers
    c.Header("Content-Type", "multipart/x-mixed-replace; boundary=frame")

    // Create a pipe to read ffmpeg's stdout
    pipe, err := cmd.StdoutPipe()
    if err != nil {
        c.String(http.StatusInternalServerError, "Failed to create pipe: %v", err)
        return
    }

    // Start the command
    if err := cmd.Start(); err != nil {
        c.String(http.StatusInternalServerError, "Failed to start ffmpeg: %v", err)
        return
    }

    // Stream the output to the response
    go func() {
        defer cmd.Wait()
        defer pipe.Close()
        http.ServeContent(c.Writer, c.Request, "stream", http.Time{}, pipe)
    }()

    // Wait for the command to finish
    if err := cmd.Wait(); err != nil {
        c.String(http.StatusInternalServerError, "Command finished with error: %v", err)
    }
}

func main() {
    r := gin.Default()

    r.GET("/stream", streamRTSP)

    fmt.Println("Starting server on :8080")
    if err := r.Run(":8080"); err != nil {
        fmt.Println("Failed to run server:", err)
    }
}
